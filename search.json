[
  {
    "objectID": "agenda.html",
    "href": "agenda.html",
    "title": "Agenda",
    "section": "",
    "text": "Programming basics recap\nMore Julia fundamentals\n\nThe type system & multiple dispatch\nPackages, environments and project organization\nPerformance optimization\n\nCode organization and git / github\n\n\n\n\nThe official Julia documentation\nThe Julia discourse forum\nYoutube video on developing Julia packages\nThe git and github documentation\nOnline git tutorials"
  },
  {
    "objectID": "agenda.html#data-science-toolkit",
    "href": "agenda.html#data-science-toolkit",
    "title": "Agenda",
    "section": "Data Science Toolkit",
    "text": "Data Science Toolkit\n\nTabular data and DataFrames.jl\nVisualization and Makie.jl\nNetwork analysis and Graphs.jl\n\n\nReferences & Materials\n\nThe docs: Makie.jl, DataFrames.jl, Graphs.jl\nThe Beautiful Makie website, with many nice plotting examples\nThe Julia Data Science online book, containing many simple examples\nThe 2022 book Julia for Data Analysis\nThe blog of Bogumli Kaminski, author of the DataFrames.jl package"
  },
  {
    "objectID": "agenda.html#bayesian-modeling",
    "href": "agenda.html#bayesian-modeling",
    "title": "Agenda",
    "section": "Bayesian Modeling",
    "text": "Bayesian Modeling\n\nProbabilistic programming with Turing.jl\nProbabilistic programming with Stan\nLow-level interface with LogDensityProblems.jl, TransformVariables.jl and DynamicHMC.jl\n\n\nReferences & Materials\n\nThe book Statistical Rethinking and Youtube lecture by Richard McElreath\nThe book Regression and Other Stories by Andrew Gelman et al.\nThe excellent Stan documentation"
  },
  {
    "objectID": "agenda.html#project-topics",
    "href": "agenda.html#project-topics",
    "title": "Agenda",
    "section": "Project Topics",
    "text": "Project Topics\n\nMain path analysis and MainPaths.jl\nPatent analytics\n\nJuliaPatents: PatentsBase.jl, PatentsLens.jl, PatentsLandscapes.jl\nData sources: EPO PATSTAT, Lens.org\n\nSurvey analysis"
  },
  {
    "objectID": "agenda.html#further-topics",
    "href": "agenda.html#further-topics",
    "title": "Agenda",
    "section": "Further Topics",
    "text": "Further Topics\n\nAgent-based models and Agents.jl\nDifferential equation models and DifferentialEquations.jl"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning Julia",
    "section": "",
    "text": "This website contains materials used in a self-organized learning endeavour that includes programming (primarily in the Julia language), statistics (primarily of the Bayesian kind) and all other things that are of interest to us (e.g., network analysis and patent analytics)."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html",
    "href": "pages/bayes/coinflip_ldp.html",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "",
    "text": "This is a tutorial on how to use the LogDensityProblems.jl ecosystem for Bayesian inference. Compared to other packages, such as Turing.jl, this approach is a bit more low-level, with the upside of being more hackable and being insightful for learning purposes."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#setup",
    "href": "pages/bayes/coinflip_ldp.html#setup",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Setup",
    "text": "Setup\nFor this exercise, we’re interested in performing inference on a simple data-generating process where a possibly biased coin is flipped \\(N=100\\) times. More formally, we could state this like so:\n\\[\ny_i \\sim \\mathrm{Bernoulli}(p) \\textrm{ for } i = 1,2,...,100\n\\]\nWe start by simulating data from a Bernoulli distribution with the probability of heads set to \\(p = 0.7\\), which for the inverse problem is going to be the unknown quantity of interest to be inferred from observed data.\n\nusing Distributions\n\n\nN = 100\np = 0.7\nd = Bernoulli(p)\ndata = rand(d, N);\n\n\nNote: The avid reader will notice that this problem could also be more efficiently represented by making use of independence between the flips, in which case we could just record the total number of flips and the number of heads and make use of the binomial distribution. However, for sake of consistency we here stick to the Bernoulli representation."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-definition",
    "href": "pages/bayes/coinflip_ldp.html#model-definition",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model definition",
    "text": "Model definition\nHaving simulated data for inference, we now proceed to the model definition using the LogDensityProblems interface package. We store the flips in a struct called CoinflipProblem:\n\nstruct CoinflipProblem\n  flips::Vector{Bool}\nend;\n\nThe centerpiece of most modern Bayesian inference methods is the unnormalized log probability density function of the posterior distribution, which indicates how well a given parameter value fits the evidence provided by our data (encoded in the loglikelihood function) and our prior beliefs. For our numerical estimation procedure, it guides our search of the parameter space to obtain a representative set of draws from the posterior distribution.\nWe start by specifying the loglikelihood function, which, for a given value \\(p\\), is the sum of the log probability densities of each of our flips under a \\(\\textrm{Bernoulli}(p)\\) distribution:\n\nfunction loglik(p::Real, flips::Vector{Bool})\n  sum(y -> logpdf(Bernoulli(p), y), flips)\nend;\n\nNext to the likelihood function which makes use of the information from the data, we also need to specify a prior distribution which encodes our prior (before having seen the data) belief about \\(p\\). Here, we’re going to be broadly skeptical of extremely biased coins and use a \\(\\mathrm{Beta}(2,2)\\) prior:\n\nfunction logpri(p::Real)\n  logpdf(Beta(2,2), p)\nend;\n\nHere’s a plot of what that looks like:\n\nusing CairoMakie\nplot(Beta(2,2))\n\n\n\n\nWe now make our problem struct callable on an input parameter \\(\\theta\\), which is just a ‘container’ holding our actual parameter of interest, \\(p\\), but could also contain other parameters. Calling the struct on a given \\(\\theta\\) returns the sum of the log density of the prior and the log likelihood, a.k.a. the log posterior density evaluated at \\(p\\).\n\nfunction (problem::CoinflipProblem)(θ)\n  (; flips) = problem\n  (; p) = θ\n  logpri(p) + loglik(p, flips)\nend  \n\nWe can instantiate our CoinflipProblem with the data and call it to evaluate the log posterior density at a couple of values for \\(p\\):\n\nproblem = CoinflipProblem(data)\nproblem((; p=0.1)), problem((; p=0.5)), problem((; p=0.9))\n\n(-171.54963185075027, -68.90925294788643, -70.47730129328443)\n\n\nWhile the actual values of the log posterior density are not immediately that useful, we can already infer that, given the data and our prior beliefs, \\(p=0.5\\) is deemed similarly likely compared to \\(p=0.9\\) and much more likely than \\(p=0.1\\)."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-estimation",
    "href": "pages/bayes/coinflip_ldp.html#model-estimation",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model estimation",
    "text": "Model estimation\nHaving defined a way to evaluate the posterior density for a given parameter value, we now want a full representation of the posterior distribution to draw conclusions about the coin. While for simple problems, like the one presented here, a closed-form analytical solution is available, a more general method which also works for complicated models is to draw a large number of samples from the posterior distribution. Based on these samples, one can easily derive statements about certain summaries of the posterior distribution (e.g., its mean and standard deviation) or visualize it.\nA general purpose numerical procedure for obtaining samples from the posterior distribution, using the unnormalized log posterior density function (as specified above) and its gradient, is Hamiltonian Monte Carlo (HMC) and its variants.\nAs more of an implementation detail, HMC operates on the unconstrained reals but our parameter \\(p\\) is confined to the unit interval \\((0,1)\\) so we need an appropriate transformation, which is conveniently available in the TransformedLogDensities package. As mentioned, HMC furthermore requires the gradient of the posterior density, which we can conveniently obtain via automatic differentiation, in this case using the ForwardDiff package.\n\nusing LogDensityProblems\nusing TransformVariables, TransformedLogDensities\nusing LogDensityProblemsAD, ForwardDiff\n\ntransformation = as((p=as_unit_interval,))\ntran = TransformedLogDensity(transformation, problem)\ngrad = ADgradient(:ForwardDiff, tran)\n\nForwardDiff AD wrapper for TransformedLogDensity of dimension 1, w/ chunk size 1\n\n\nWe can now evaluate the logdensity and its gradient:\n\nLogDensityProblems.logdensity_and_gradient(grad, zeros(1))\n\n(-70.29554730900632, [23.0])\n\n\nWith this in place, we can now draw a large number of samples (say, \\(S=2000\\)) from the posterior distribution using the HMC implementation in DynamicHMC. We use the ThreadsX package to sample \\(k\\) chains in parallel:\n\nusing Random\nusing DynamicHMC\nusing ThreadsX\n\nfunction sample(grad, S, k; rng=Random.default_rng()) \n   ThreadsX.map(1:k) do _\n     mcmc_with_warmup(rng, grad, S; reporter=NoProgressReport())\n   end\nend\n\nresult = sample(grad, 2000, 4)\n\n4-element Vector{NamedTuple{(:posterior_matrix, :tree_statistics, :κ, :ϵ), Tuple{Matrix{Float64}, Vector{DynamicHMC.TreeStatisticsNUTS}, GaussianKineticEnergy{LinearAlgebra.Diagonal{Float64, Vector{Float64}}, LinearAlgebra.Diagonal{Float64, Vector{Float64}}}, Float64}}}:\n (posterior_matrix = [1.0058940995780696 1.0605630001032291 … 1.324558672493981 1.1884766295323521], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-60.39014100493384, 2, turning at positions 0:3, 0.910988062043864, 3, DynamicHMC.Directions(0xd9111d8b)), DynamicHMC.TreeStatisticsNUTS(-60.074474827326554, 2, turning at positions 0:3, 0.9539617157746445, 3, DynamicHMC.Directions(0xd0c40807)), DynamicHMC.TreeStatisticsNUTS(-60.89710601788657, 1, turning at positions 1:2, 0.8283087846124366, 3, DynamicHMC.Directions(0xeab21336)), DynamicHMC.TreeStatisticsNUTS(-64.8266259972107, 2, turning at positions -2:1, 0.5324468251200921, 3, DynamicHMC.Directions(0x379fcfd5)), DynamicHMC.TreeStatisticsNUTS(-63.365031302412476, 1, turning at positions -1:0, 0.9351010505904543, 1, DynamicHMC.Directions(0x80333792)), DynamicHMC.TreeStatisticsNUTS(-62.15526687733028, 1, turning at positions -2:-3, 0.9999999999999999, 3, DynamicHMC.Directions(0xad89e82c)), DynamicHMC.TreeStatisticsNUTS(-60.98864166881967, 1, turning at positions 0:1, 0.8264712688343019, 1, DynamicHMC.Directions(0x2287f241)), DynamicHMC.TreeStatisticsNUTS(-60.7189886382524, 2, turning at positions -2:1, 0.9999999999999999, 3, DynamicHMC.Directions(0x57a684b5)), DynamicHMC.TreeStatisticsNUTS(-61.186740105501904, 1, turning at positions 0:1, 0.7083416553312581, 1, DynamicHMC.Directions(0xcdbf96c9)), DynamicHMC.TreeStatisticsNUTS(-61.2845266262707, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xcf6c1339))  …  DynamicHMC.TreeStatisticsNUTS(-61.00321115408256, 2, turning at positions -2:1, 0.9943797310263487, 3, DynamicHMC.Directions(0x0dbabc6d)), DynamicHMC.TreeStatisticsNUTS(-61.047888656611754, 1, turning at positions -1:-2, 0.7326699634540859, 3, DynamicHMC.Directions(0xbe2650ad)), DynamicHMC.TreeStatisticsNUTS(-64.45222688267648, 1, turning at positions 0:1, 0.3112007310233998, 1, DynamicHMC.Directions(0x6991ce45)), DynamicHMC.TreeStatisticsNUTS(-63.32537118182135, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x9a3e5aff)), DynamicHMC.TreeStatisticsNUTS(-60.8088562509901, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0xc37cfcda)), DynamicHMC.TreeStatisticsNUTS(-61.72423897728738, 1, turning at positions 1:2, 0.6753774263783744, 3, DynamicHMC.Directions(0x944c7baa)), DynamicHMC.TreeStatisticsNUTS(-60.31076701652606, 2, turning at positions -1:2, 0.9950350863840173, 3, DynamicHMC.Directions(0x1064eaee)), DynamicHMC.TreeStatisticsNUTS(-60.280276380924505, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x7f7d7717)), DynamicHMC.TreeStatisticsNUTS(-61.14739805160589, 1, turning at positions 0:1, 0.7680370952414641, 1, DynamicHMC.Directions(0x64b07d03)), DynamicHMC.TreeStatisticsNUTS(-60.975435178921074, 2, turning at positions -2:1, 0.9999999999999999, 3, DynamicHMC.Directions(0xc9afa82d))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.20892271624687506], ϵ = 1.1411133715429909)\n (posterior_matrix = [1.0727989942951228 0.8119528888152521 … 0.79908682835979 1.145090046107464], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-60.08969967838724, 1, turning at positions 1:2, 0.9550710000631782, 3, DynamicHMC.Directions(0xe3fdcc32)), DynamicHMC.TreeStatisticsNUTS(-60.33438721213265, 1, turning at positions -1:-2, 0.9526179012068448, 3, DynamicHMC.Directions(0x7a9d7689)), DynamicHMC.TreeStatisticsNUTS(-60.1715475879722, 2, turning at positions -1:2, 0.9724428142580819, 3, DynamicHMC.Directions(0xb1a919f2)), DynamicHMC.TreeStatisticsNUTS(-59.82026160690279, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xaabc9baf)), DynamicHMC.TreeStatisticsNUTS(-61.73936489907677, 2, turning at positions 0:3, 0.7580581009786758, 3, DynamicHMC.Directions(0xd0d13d77)), DynamicHMC.TreeStatisticsNUTS(-60.8676308181903, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xe2ae375d)), DynamicHMC.TreeStatisticsNUTS(-62.876377035941815, 1, turning at positions -1:-2, 0.6828729299052569, 3, DynamicHMC.Directions(0x7580a1f9)), DynamicHMC.TreeStatisticsNUTS(-61.49700608189974, 1, turning at positions 0:1, 0.7452739995541132, 1, DynamicHMC.Directions(0x606ba1ab)), DynamicHMC.TreeStatisticsNUTS(-62.09989115596749, 2, turning at positions -2:1, 0.9092315215293502, 3, DynamicHMC.Directions(0xd3eee089)), DynamicHMC.TreeStatisticsNUTS(-59.788980535794785, 1, turning at positions -2:-3, 0.9999999999999999, 3, DynamicHMC.Directions(0x42e7b9e0))  …  DynamicHMC.TreeStatisticsNUTS(-61.17718618474947, 1, turning at positions -1:-2, 0.8026263013117916, 3, DynamicHMC.Directions(0x228645c1)), DynamicHMC.TreeStatisticsNUTS(-60.925086694731476, 2, turning at positions -2:1, 0.9999999999999999, 3, DynamicHMC.Directions(0xe1cd431d)), DynamicHMC.TreeStatisticsNUTS(-59.8291123709329, 2, turning at positions 0:3, 0.9925449407500818, 3, DynamicHMC.Directions(0x3389b7eb)), DynamicHMC.TreeStatisticsNUTS(-59.91067528787149, 1, turning at positions 1:2, 0.977774157007917, 3, DynamicHMC.Directions(0x466184ee)), DynamicHMC.TreeStatisticsNUTS(-59.833820533481365, 1, turning at positions 2:3, 0.9999999999999999, 3, DynamicHMC.Directions(0xe7661eeb)), DynamicHMC.TreeStatisticsNUTS(-60.19603740968348, 2, turning at positions 0:3, 0.9427396847040601, 3, DynamicHMC.Directions(0x6268e46b)), DynamicHMC.TreeStatisticsNUTS(-60.1491868678926, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0x7cd311e2)), DynamicHMC.TreeStatisticsNUTS(-60.78554403869777, 2, turning at positions -2:1, 0.9048927860167173, 3, DynamicHMC.Directions(0xd8d596a1)), DynamicHMC.TreeStatisticsNUTS(-60.68190243497294, 2, turning at positions 0:3, 0.9091906066477812, 3, DynamicHMC.Directions(0xf327c7ff)), DynamicHMC.TreeStatisticsNUTS(-60.802989891345995, 1, turning at positions 1:2, 0.8967900773259979, 3, DynamicHMC.Directions(0xa3fe8a22))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.22867098010810216], ϵ = 0.9616116131710419)\n (posterior_matrix = [0.9825714471634304 0.9660592973663192 … 1.049439559959976 1.0664098504698984], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-59.86950379409712, 2, turning at positions 0:3, 0.9821743734991469, 3, DynamicHMC.Directions(0x04294b57)), DynamicHMC.TreeStatisticsNUTS(-60.350702558010035, 2, turning at positions 0:3, 0.9093688311452613, 3, DynamicHMC.Directions(0xb67758ef)), DynamicHMC.TreeStatisticsNUTS(-60.10015446478, 2, turning at positions 0:3, 0.9541728156974032, 3, DynamicHMC.Directions(0xdc737477)), DynamicHMC.TreeStatisticsNUTS(-60.70160044312167, 1, turning at positions 1:2, 0.8927288964840648, 3, DynamicHMC.Directions(0x19219e02)), DynamicHMC.TreeStatisticsNUTS(-60.58155292812043, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0x363c6e52)), DynamicHMC.TreeStatisticsNUTS(-60.33294601338947, 1, turning at positions 0:1, 0.9689293554448278, 1, DynamicHMC.Directions(0x6ab23c8d)), DynamicHMC.TreeStatisticsNUTS(-61.199231371924256, 2, turning at positions 0:3, 0.8979441260214336, 3, DynamicHMC.Directions(0xb4fe3513)), DynamicHMC.TreeStatisticsNUTS(-61.79718062459656, 2, turning at positions 0:3, 0.7288270730495577, 3, DynamicHMC.Directions(0xd6e20047)), DynamicHMC.TreeStatisticsNUTS(-60.05845620645043, 1, turning at positions 2:3, 0.9987579663974852, 3, DynamicHMC.Directions(0x1863b79f)), DynamicHMC.TreeStatisticsNUTS(-60.168099440057524, 2, turning at positions 0:3, 0.953297948697112, 3, DynamicHMC.Directions(0x6198ee47))  …  DynamicHMC.TreeStatisticsNUTS(-59.914162563504576, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0xa1bf7516)), DynamicHMC.TreeStatisticsNUTS(-60.733017478605426, 2, turning at positions 0:3, 0.8666746419531125, 3, DynamicHMC.Directions(0xab881503)), DynamicHMC.TreeStatisticsNUTS(-62.20523522219133, 1, turning at positions -1:-2, 0.5511972372395637, 3, DynamicHMC.Directions(0x4b1708d9)), DynamicHMC.TreeStatisticsNUTS(-60.546748532682265, 1, turning at positions -1:0, 0.9225157589157382, 1, DynamicHMC.Directions(0x03b2b2b4)), DynamicHMC.TreeStatisticsNUTS(-62.5399485754696, 2, turning at positions -2:1, 0.8203085852951834, 3, DynamicHMC.Directions(0xbd3ffc29)), DynamicHMC.TreeStatisticsNUTS(-62.03560488153044, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0x1e6bcdee)), DynamicHMC.TreeStatisticsNUTS(-62.376984567973054, 1, turning at positions -1:0, 0.6170848930876548, 1, DynamicHMC.Directions(0x65c425a2)), DynamicHMC.TreeStatisticsNUTS(-61.976449516622, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0xff11559e)), DynamicHMC.TreeStatisticsNUTS(-59.98995546133357, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x9ce8e01b)), DynamicHMC.TreeStatisticsNUTS(-59.91852529573208, 2, turning at positions -1:2, 0.9968995037839125, 3, DynamicHMC.Directions(0xc9b32d46))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.20161543408220398], ϵ = 1.1129093597211068)\n (posterior_matrix = [0.5446751487088308 0.47595745309505827 … 1.2177538893936102 1.0845875208159415], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-62.078930987611365, 2, turning at positions -2:1, 0.9999999999999999, 3, DynamicHMC.Directions(0x0079d62d)), DynamicHMC.TreeStatisticsNUTS(-62.53871102728392, 1, turning at positions 0:1, 0.8463528017943344, 1, DynamicHMC.Directions(0xac184d15)), DynamicHMC.TreeStatisticsNUTS(-62.984824969986164, 1, turning at positions 0:1, 0.9578594383350257, 1, DynamicHMC.Directions(0x3f97355b)), DynamicHMC.TreeStatisticsNUTS(-62.967451406638276, 1, turning at positions -2:-3, 0.9366488148091735, 3, DynamicHMC.Directions(0xe094b71c)), DynamicHMC.TreeStatisticsNUTS(-59.84587330199332, 1, turning at positions -1:-2, 0.9883861994712538, 3, DynamicHMC.Directions(0xf2d63ca9)), DynamicHMC.TreeStatisticsNUTS(-59.860492059994236, 2, turning at positions -1:2, 0.9945446217174254, 3, DynamicHMC.Directions(0x4daac392)), DynamicHMC.TreeStatisticsNUTS(-59.97874511035256, 2, turning at positions 5:6, 0.9740976317272955, 7, DynamicHMC.Directions(0xcad4c916)), DynamicHMC.TreeStatisticsNUTS(-60.11178392593013, 2, turning at positions 5:6, 0.9710105727920981, 7, DynamicHMC.Directions(0x6e5b0f6e)), DynamicHMC.TreeStatisticsNUTS(-60.53453681477102, 1, turning at positions -1:0, 0.9103845892446467, 1, DynamicHMC.Directions(0xffbc5c80)), DynamicHMC.TreeStatisticsNUTS(-60.46537246703829, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0x5b37ec36))  …  DynamicHMC.TreeStatisticsNUTS(-60.321758673442794, 1, turning at positions -1:0, 0.9190423635138688, 1, DynamicHMC.Directions(0xca1bb21e)), DynamicHMC.TreeStatisticsNUTS(-60.27559247253089, 1, turning at positions -2:-3, 0.996401182474261, 3, DynamicHMC.Directions(0xf1e3a5a0)), DynamicHMC.TreeStatisticsNUTS(-62.05413826931228, 2, turning at positions -3:0, 0.7173369273952792, 3, DynamicHMC.Directions(0xf6e63dfc)), DynamicHMC.TreeStatisticsNUTS(-60.50542723229151, 1, turning at positions 2:3, 0.9892675838648665, 3, DynamicHMC.Directions(0x614aa61b)), DynamicHMC.TreeStatisticsNUTS(-60.60064377801833, 2, turning at positions -3:0, 0.9183252504264824, 3, DynamicHMC.Directions(0xef865bac)), DynamicHMC.TreeStatisticsNUTS(-60.19434665190732, 1, turning at positions -2:-3, 0.9732944596878762, 3, DynamicHMC.Directions(0x0f91d030)), DynamicHMC.TreeStatisticsNUTS(-60.00172987397604, 2, turning at positions 0:3, 0.9747810925179953, 3, DynamicHMC.Directions(0x5bff1e6f)), DynamicHMC.TreeStatisticsNUTS(-59.97334674040486, 1, turning at positions 1:2, 0.9869947520622174, 3, DynamicHMC.Directions(0xb1aaf11e)), DynamicHMC.TreeStatisticsNUTS(-60.62668539044079, 1, turning at positions -1:-2, 0.8772252974382639, 3, DynamicHMC.Directions(0xe7995169)), DynamicHMC.TreeStatisticsNUTS(-60.711002299455124, 2, turning at positions -1:2, 0.9800512439519286, 3, DynamicHMC.Directions(0x3aecea42))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.20629709778957428], ϵ = 0.9671849948793995)\n\n\nThe result is a vector of length \\(k\\), each element of which contains for each chain the posterior samples as well as some statistics about the sampling procedure, which can be used to check if everything went as planned."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-checking",
    "href": "pages/bayes/coinflip_ldp.html#model-checking",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model checking",
    "text": "Model checking\nHaving obtained samples from the posterior distribution, we’re in principle ready to use our model for inference, i.e., answer the question of whether our coin is biased and by how much, and how certain we can be of the answer based on the data we have seen.\nHowever, before we jump to inference, it is good practice to perform some model checks: Our estimates rely on a numerical sampling scheme, which can fail, rendering the results unreliable.\n\nusing MCMCDiagnosticTools\nusing DynamicHMC.Diagnostics\n\nFirst, we can check the effective sample size (ess). In Markov chain monte carlo (MCMC) approaches, samples are often correlated, meaning that the total number of ‘effective’ samples is less than obtained by an uncorrelated sampling procedure because consecutive samples carry some of the same information.\n\ness, Rhat =  ess_rhat(stack_posterior_matrices(result))\n\n([2821.153267550686], [1.0009676808218122])\n\n\n\nsummarize_tree_statistics.(getfield.(result, :tree_statistics))\n\n4-element Vector{DynamicHMC.Diagnostics.TreeStatisticsSummary{Float64, NamedTuple{(:max_depth, :divergence, :turning), Tuple{Int64, Int64, Int64}}}}:\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.91, 5/25/50/75/95%: 0.64 0.86 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 62%, 2 => 38%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.92, 5/25/50/75/95%: 0.65 0.88 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 65%, 2 => 35%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.92, 5/25/50/75/95%: 0.68 0.89 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 65%, 2 => 35%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.94, 5/25/50/75/95%: 0.74 0.91 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 59%, 2 => 41%"
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-inference",
    "href": "pages/bayes/coinflip_ldp.html#model-inference",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model inference",
    "text": "Model inference\n\nusing StructArrays\n\nfunction posterior(result)\n  samples = eachcol(pool_posterior_matrices(result))\n  StructArray(transform.(transformation, samples))\nend\n\npost = posterior(result);\n\n\nfunction summarize(post)\n  m, s = round.((mean(post.p), std(post.p)); digits=2)\n  println(\"posterior mean: \", m)\n  println(\"posterior sd: \", s)\nend\n\nsummarize(post)\n\nposterior mean: 0.72\nposterior sd: 0.04\n\n\n\nfunction plot_inferred_vs_true(post, p_true)\n  fig = Figure(); ax = Axis(fig[1,1])\n  density!(ax, post.p; color=:grey20)\n  vlines!(ax, p_true; linewidth=2)\n  fig\nend\n\nplot_inferred_vs_true(post, p)"
  },
  {
    "objectID": "pages/programming_recap.html",
    "href": "pages/programming_recap.html",
    "title": "Programming Basics",
    "section": "",
    "text": "Exercise 1\nWrite a function that takes in a name and prints out a greeting, e.g., “Hello, Daniel”.\n\n\nSolution\ngreet(name) = println(\"Hello, $(name)!\")\ngreet(\"Daniel\")\n\n\nHello, Daniel!\n\n\n\n\nExercise 2\nWrite a function which greets the users whose name starts with a ‘D’ in Spanish, users whose name starts with a ‘C’ in German, and everyone else in English.\n\n\nSolution\nfunction greet(name)\n    firstletter = first(name)\n    if firstletter == 'D'\n        println(\"Hola, $(name)!\")\n    elseif firstletter == 'C'\n        println(\"Hallo, $(name)!\")\n    else\n        println(\"Hello, $(name)!\")\n    end\nend\n\ngreet(\"Denise\")\ngreet(\"Clara\")\ngreet(\"Marius\")\n\n\nHola, Denise!\nHallo, Clara!\nHello, Marius!\n\n\n\n\nExercise 3\nWrite a function which takes an array of numbers as input and returns their sum, without using the built-in function sum.\n\n\nSolution\nfunction mysum(arr)\n    res = zero(eltype(arr))\n    for x in arr\n        res += x\n    end\n    res\nend\n\n@show mysum([1,2,3,4,5]);\n\n\nmysum([1, 2, 3, 4, 5]) = 15\n\n\n\n\nExercise 4\nWrite a function which takes an array of numbers as input and returns their sum of squares.\n\n\nSolution\nsum_of_squares(arr) = sum(x -> x^2, arr) \n# or mapreduce(x -> x^2, +, arr)\n@show sum_of_squares([1,2,3]);\n\n\nsum_of_squares([1, 2, 3]) = 14\n\n\n\n\nExercise 5\nWrite a function which takes an array of numbers as input and returns the largest element.\n\n\nSolution\nlargest_element(arr) = findmax(arr)[1]\n@show largest_element([5,2,1,7]);\n\n\nlargest_element([5, 2, 1, 7]) = 7\n\n\n\n\nExercise 6\nWrite a function which takes an array of numbers as input and returns only those elements which are \\(>5\\). In a second step, write a more generic version which takes the limit as a second argument.\n\n\nSolution\ngreater_5(arr) = filter(>(5), arr)\ngreater_k(arr, k) = filter(>(k), arr)\n\n@show greater_5([1,2,3,4,5,6,7,8]);\n@show greater_k([1,2,3,4,5,6,7,8], 2);\n\n\ngreater_5([1, 2, 3, 4, 5, 6, 7, 8]) = [6, 7, 8]\ngreater_k([1, 2, 3, 4, 5, 6, 7, 8], 2) = [3, 4, 5, 6, 7, 8]\n\n\n\n\nExercise 7\nWrite a function which checks if an element is contained in an array.\n\n\nSolution\nx_in_arr(x, arr) = x in arr\n\n@show x_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]);\n\n\nx_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]) = true\n\n\n\n\nExercise 8\nWrite a function which takes a Matrix as input and returns the column-wise sums. In a second step, write a more generic version which takes an arbitrary reduction function (such as sum) as an additional argument and performs it column-wise.\n\n\nSolution\ncolsum(m) = sum(m; dims=1)\ncolop(op, m) = map(op, eachcol(m))\n\n@show colsum([1 2; 3 4]);\n@show colop(sum, [1 2; 3 4]);\n\n\ncolsum([1 2; 3 4]) = [4 6]\n\n\ncolop(sum, [1 2; 3 4]) = [4, 6]\n\n\n\n\nExercise 9\nWrite a function that concatenates two arrays. In a second step, write a function which concatenates two \\(n\\)-element arrays into a \\(n \\times 2\\) matrix.\n\n\nSolution\nconcatenate(a, b) = vcat(a, b)\nconcatenate_matrix(a, b) = hcat(a, b)\n\n@show concatenate([1,2], [3,4,5]);\n@show concatenate_matrix([1,2,3], [4,5,6]);\n\n\nconcatenate([1, 2], [3, 4, 5]) = [1, 2, 3, 4, 5]\n\n\nconcatenate_matrix([1, 2, 3], [4, 5, 6]) = [1 4; 2 5; 3 6]\n\n\n\n\nExercise 10\nWrite a function that takes a number and returns a function which multiplies its input by that number. Apply the generated function to each element of an array of 5 randomly generated numbers.\n\n\nSolution\ngenerate_mul_by_k(k) = x -> x * k\n\nmul_by_3 = generate_mul_by_k(3)\nmap(mul_by_3, rand(5))\n\n\n5-element Vector{Float64}:\n 0.5351803078816794\n 2.386059918957256\n 1.914868506331198\n 1.7315188219977404\n 1.8693482251279212"
  },
  {
    "objectID": "pages/statistical-rethinking/week1.html",
    "href": "pages/statistical-rethinking/week1.html",
    "title": "Statistical Rethinking",
    "section": "",
    "text": "About this Document\nThis writeup loosely follows Richard McElreath’s Statistical Rethinking YouTube lecture and book of the same name. As a programming environment it uses Julia (instead of R, as used in the lecture). Julia has a variety of packages on probabilistic programming and Bayesian inference, such as Turing.jl, LogDensityProblems.jl, or Stan.jl. This writeup focuses more on the technical implementation and assumes that the reader has followed the lecture for background and reasoning.\n\n\nBayesian Inference and Bayes Rule\nBayesian inference departs from a model for the joint distribution of all observed variables (data, \\(\\mathcal{D}\\)) and unobserved variables (parameters, \\(\\theta\\)):\n\\[ p(\\theta, \\mathcal{D}) = p(\\mathcal{D}|\\theta)p(\\theta) \\]\nThe factorization on the right hand side is a direct consequence of the definition of conditional probability (see box below).\nBayesian inference then relies on Bayes’ rule (from which it derives its name) to derive the posterior distribution of parameters \\(\\theta\\) conditional on observed data \\(\\mathcal{D}\\):\n\\[\np(\\theta | \\mathcal{D}) = \\frac{p(\\mathcal{D}|\\theta)p(\\theta)}{p({\\mathcal{D}})}\n\\]\n\nBayes Rule is just a restatement of the general definition of conditional probability:\n\\[\\mathrm{Pr}(A|B) := \\frac{\\mathrm{Pr}(A,B)}{\\mathrm{Pr}(B)}\\]\nThe numerator here is the joint probability, i.e. the probability that both events \\(A\\) and \\(B\\) occur. The joint probability is also sometimes written as \\(p(A \\cap B)\\) (an intersection in set notation) and is symmetric with respect to its arguments: \\[\\mathrm{Pr}(A,B) = \\mathrm{Pr}(A|B)\\mathrm{Pr}(B) = \\mathrm{Pr}(B|A)\\mathrm{Pr}(A)\\] If we now replace the joint probability by the its conditioned representation in the definition above, we arive at Bayes Rule: \\[\\mathrm{Pr}(A|B) = \\frac{\\mathrm{Pr}(B|A)\\mathrm{Pr}(A)}{\\mathrm{Pr}(B)}\\]\n\nIn the context of Bayes’ rule, \\(p(\\mathcal{D}|\\theta)\\) (taken as a function of \\(\\theta\\) and not \\(\\mathcal{D}\\)) is called the likelihood and specifies how the data influence our inferences. \\(p(\\theta)\\) is called the prior and formalizes our beliefs on the parameters before having seen the data (which might derive from earlier studies or common sense).\n\n\nGlobe Tossing\n\nSimulating the Data Generating Process\nWe start by writing a simple program which can simulate the globe tossing experiment. In this case, this just involves sampling ‘water’ or ‘land’ \\(N\\) times, with probabilities \\(\\theta\\) and \\(1-\\theta\\), respectively:\n\nusing StatsBase\n\nfunction simulate_globe(θ, N) \n    outcomes = [\"W\", \"L\"]\n    probabilities = [θ, 1-θ]\n    sample(outcomes, Weights(probabilities), N)\nend\n\nsimulate_globe(0.7, 5)\n\n5-element Vector{String}:\n \"W\"\n \"W\"\n \"W\"\n \"W\"\n \"W\"\n\n\nBecause in the end we just care about the count of ‘water’ throws among the \\(N\\) trials and the sum of independent Bernoulli trials is well modeled by the binomial distribution, we can also just use that to simulate our experiment:\n\nusing Distributions\n\nsimulate_globe_binomial(θ, N) = rand(Binomial(N, θ))\nsimulate_globe_binomial(0.7, 5)\n\n4\n\n\n\n\nThe Beta-Binomial Model\nFollowing the general process of Bayesian inference outlined above, we need a representation of the joint distribution of known and unknown variables, which we can factor into two components: (1) a sampling distribution that describes how the known variables are generated for given values of the unknowns and (2) a prior distribution over the unknowns.\nSampling distribution. The data generating process for the globe tossing example is well represented by a binomial sampling model, which specifies a distribution for the number of ‘successes’ (called \\(y\\), say occurrences of water) among a number of \\(N\\) trials, each with the same success probability \\(\\theta\\). To indicate that the random variable \\(y\\) follows a binomial distribution, we write:\n\\[ y \\sim \\mathrm{Binomial}(N, \\theta)\\]\nComputing the probability of an observed number of successes \\(y\\) for a given \\(\\theta\\) is then given by the probability mass function of the binomial distribution:\n\\[ p(y|\\theta) = \\mathrm{Binomial}(y | N, \\theta) = {N \\choose y} \\theta^y (1-\\theta)^{N-y},\\]\nwhere \\({N \\choose y} = \\frac{N!}{y!(N-y)!}\\) is called the binomial coefficient. In the context of the posterior distribution, where the right hand side of the above serves as the likelihood and is taken as a function of \\(\\theta\\), the binomial coefficient is constant (because it does not depend on \\(\\theta\\)), which is helpful in analytical derivations.\nHere is a plot of the binomial distribution for different values of \\(\\theta\\), with \\(N=50\\):\n\nusing CairoMakie\n\nfunction plotbinom(params)\n    tostring(p) = \"Binomial(50, $(p.θ))\"\n    fig = Figure()\n    ax = Axis(fig[1,1])\n    foreach(params) do p\n        d = Binomial(50, p.θ)\n        barplot!(ax, d; cycle=:color, label=tostring(p))\n    end\n    axislegend(ax; position=(:left, :top))\n    fig\nend\n\nparams = [(;θ=0.1), (;θ=0.5), (;θ=0.9)]\nplotbinom(params)\n\n\n\n\nPrior distribution. A natural prior for the parameter \\(\\theta\\) is the beta distribution, which is defined for the interval \\([0,1]\\) and thus fits the bounds of \\(\\theta\\) (which represents a proportion). The distribution has two paramteres, commonly called \\(\\alpha\\) and \\(\\beta\\), which control its shape.\nThe probability density function for the beta is given by:\n\\[\np(\\theta) = \\textrm{Beta}(\\theta | \\alpha, \\beta) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1}\n\\]\nThe factor involving the gamma functions \\(\\Gamma(\\cdot)\\) is a normalizing constant ensuring that the pdf integrates to 1 over the sample space. Here is a plot of the pdf with different values for \\(\\alpha\\) and \\(\\beta\\):\n\nfunction plotbeta(params)\n    tostring(p) = \"Beta($(p.α), $(p.β))\"\n    fig = Figure()\n    ax = Axis(fig[1,1])\n    foreach(params) do p\n        d = Beta(p...)\n        plot!(ax, d; cycle=:color, label=tostring(p))\n    end\n    axislegend(ax; position=(:left, :top))\n    fig\nend\n\nparams = [(;α=1, β=1), (;α=2, β=2), (;α=3, β=2)]\nplotbeta(params)\n\n\n\n\nPosterior distribution. The posterior distribtution is proportional to the prior times the likelihood (which is just the factored joint distribution):\n\\[\np(\\theta|\\mathcal{D}) \\propto p(\\mathcal{D}|\\theta)p(\\theta)\n\\]\nFor many analytical and numerical procedures the normalizing constant \\(p(\\mathcal{D}\\)) can be dropped. We here also make use of this fact to analytically derive the closed form posterior distribution. This is not generally possible, which is why numerical applications are so important in Bayesian inference.\nFollowing the choices above, the unnormalized posterior distribution is then the product of a binomial likelihood and a beta prior:\n\\[\n\\begin{align}\np(\\theta|\\mathcal{D}) &\\propto \\textrm{Binomial}(y|N, \\theta) \\times \\textrm{Beta}(\\theta|\\alpha, \\beta) \\\\\n&= {N \\choose y} \\theta^y (1-\\theta)^{N-y} \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1}\n\\end{align}\n\\]\nWhile this looks intimidating at first, it is just the definitions for the binomial and beta pdf (or pmf) multiplied together. Just as we started by dropping the normalizing constant for the posterior distribution, we can now again drop the constants from the beta and binomial probability functions (i.e., everything not involving \\(\\theta\\), such as the binomial coefficient and the gamma functions):\n\\[\n\\begin{align}\np(\\theta|\\mathcal{D}) &\\propto \\theta^y (1-\\theta)^{N-y} \\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1} \\\\\n&= \\theta^{y + \\alpha - 1}(1-\\theta)^{N-y+\\beta-1}\n\\end{align}\n\\]\nThe result is the kernel of a beta distribution (i.e. a beta without the normalizing constant), from which we can conclude that the posterior is just another beta distribtution where the \\(\\alpha\\) and \\(\\beta\\) hyperparameters from the original prior distribution are updated based on the data, i.e.:\n\\[ \\theta | y \\sim \\textrm{Beta}(\\alpha + y, \\beta + N - y)\\]\nWrapped into a Julia function, this is a single line of code:\n\nglobe_posterior(y, N; α=2, β=2) = Beta(α + y, β + N - y);\n\nWith this, we’re now ready to run a simple simulation with, say, \\(N=100\\) throws:\n\n\nPlotting function\nfunction plot_prior_posterior(prior, posterior, true_θ)\n    fig = Figure(); ax = Axis(fig[1,1])\n    plot!(ax, prior; label=\"Prior\", cycle=:color)\n    plot!(ax, posterior; label=\"Posterior\", cycle=:color)\n    vlines!(ax, true_θ; label=\"True θ\", linewidth=3, color=:black)\n    axislegend(ax; position=(:left, :top))\n    fig\nend;\n\n\n\ntrue_θ = 0.7; N = 100\nthrows = simulate_globe(true_θ, N)\ny = sum(==(\"W\"), throws)\n\nprior = Beta(2,2)\nposterior = globe_posterior(y, N)\n\nplot_prior_posterior(prior, posterior, true_θ)\n\n\n\n\nBased on this, we can see how our diffuse prior on the proportion of water has been updated based on the data to a posterior that sits close to the true value of \\(\\theta = 0.7\\).\n\n\nDigression: Grid Approximation\nA different way to obtain the posterior distribution, relying on numerical approximation, is to compute the joint distribution (likelihood \\(\\times\\) prior) at a fine grid of values and then normalize this by dividing by the sum of the computed values.\n\njoint(N, y, θ) = pdf(Beta(1,1), θ) * pdf(Binomial(N, θ), y)\n\nfunction posterior_approx(N, y; P=1000)\n    grid = range(0, 1, P)\n    points = [joint(N, y, θ) for θ in grid]\n    posterior = points ./ sum(points)\n    sample(grid, Weights(posterior), 10_000; replace=true)\nend\n\npost = posterior_approx(N, y)\nhist(post; color=:grey80, strokewidth=1) \nvlines!(true_θ; color=:black, linewidth=2)\nxlims!(0, 1); current_figure()\n\n\n\n\nWhile this approach does not rely on mathematical conveniences such as conjugacy, it suffers from the curse of dimensionality: The number of grid points grows exponentially with the number of parameters and so grid approximation is only suited for very simiple problems.\n\n\n\nPrior & Posterior Predictions\nOften times, we are interested in the range of outcomes that would be reasonable to expect for a given prior or posterior distribution, i.e., the prior or posterior predictive distribution. Seeing how the model behaves for a given prior or posterior distribution is useful for model & research design, for model checking and validation, or for making forecasts.\nA particularly practical way to obtain the prior or posterior predictive distribution is via sampling many times from the prior or posterior and then for each sampled parameter value simulate an outcome from the observation model.\nFor the globe tossing example this could look like the following julia function:\n\nfunction predictive(N, prior_or_posterior; S=1000)\n    simulate(θ, N) = rand(Binomial(N, θ))\n    samples = rand(prior_or_posterior, S)\n    [simulate(θ, N) for θ in samples]\nend;\n\nWe can now use this to check what kinds of results the model would deem reasonable in an experiment with 100 globe throws, before seeing any data and just based on a flat \\(\\textrm{Beta}(1,1)\\) prior:\n\npriorpred = predictive(100, Beta(1,1))\nhist(priorpred; color=:grey80, strokewidth=1)\n\n\n\n\nThis indicates that, under the flat prior, a result of 0 out of 100 times water is seen as similarly likely as, e.g., 50 out of 100 times water, which is probably not that sensible.\nWe can perform a similar excercise but now based on the posterior distribution:\n\npostpred = predictive(100, posterior)\nhist(postpred; color=:grey80, strokewidth=1)\nxlims!(0, 100); current_figure()\n\n\n\n\nConsistent with the posterior distribution centered at 0.7, we can see that the model now expects around 70 out of 100 throws to result in ‘water’ and both values lower than 50 or close to 100 are deemed very unlikely."
  },
  {
    "objectID": "pages/statistical-rethinking/week2.html",
    "href": "pages/statistical-rethinking/week2.html",
    "title": "Statistical Rethinking",
    "section": "",
    "text": "Get and Inspect Data\nIn the week 2 lecture, we learn techniques of linear regression in the investigation of the relationships between height, weight, age and sex. We start by writing a function to download the data used in the lecture from its GitHub repository directly into a DataFrame.\n\nusing HTTP\nusing CSV\nusing DataFrames\nusing DataFramesMeta\nusing CairoMakie\nusing Distributions\n\n\nfunction download_data(dataset)\n    repo = \"https://raw.githubusercontent.com/rmcelreath/rethinking/master/data/\"\n    link = repo * dataset\n    file = HTTP.download(link)\n    CSV.read(file, DataFrame)\nend;\n\n\ndf = download_data(\"Howell1.csv\");\n\n┌ Warning: Reading one byte at a time from HTTP.Stream is inefficient.\n│ Use: io = BufferedInputStream(http::HTTP.Stream) instead.\n│ See: https://github.com/BioJulia/BufferedStreams.jl\n└ @ HTTP.Streams C:\\Users\\Jakob\\.julia\\packages\\HTTP\\z8l0i\\src\\Streams.jl:240\n\n\n┌ Info: Downloading\n│   source = \"https://raw.githubusercontent.com/rmcelreath/rethinking/master/data/Howell1.csv\"\n│   dest = \"C:\\\\Users\\\\Jakob\\\\AppData\\\\Local\\\\Temp\\\\Howell1.csv\"\n│   progress = NaN\n│   time_taken = \"1.39 s\"\n│   time_remaining = \"NaN s\"\n│   average_speed = \"4.613 KiB/s\"\n│   downloaded = \"6.426 KiB\"\n│   remaining = \"∞ B\"\n└   total = \"∞ B\"\n┌ Info: Downloading\n│   source = \"https://raw.githubusercontent.com/rmcelreath/rethinking/master/data/Howell1.csv\"\n│   dest = \"C:\\\\Users\\\\Jakob\\\\AppData\\\\Local\\\\Temp\\\\Howell1.csv\"\n│   progress = NaN\n│   time_taken = \"1.82 s\"\n│   time_remaining = \"NaN s\"\n│   average_speed = \"6.560 KiB/s\"\n│   downloaded = \"11.919 KiB\"\n│   remaining = \"∞ B\"\n└   total = \"∞ B\"\n\n\nWe create a second dataset containing only adults, as the growth dynamics of children result in a quite different relationship between weight and height:\n\ndf18 = @rsubset(df, :age > 18);\n\nHere’s a plot of the full dataset and the adults-only dataset sidy-by-side:\n\n\nCode\nplotargs = (color=(:black, 0.0), strokewidth=4, strokecolor=(:crimson, .5))\n\nfig = Figure(resolution=(800, 400))\nax1 = Axis(fig[1,1]; title=\"Full data\", ylabel=\"weight (kg)\", xlabel=\"height (cm)\")\nax2 = Axis(fig[1,2]; title=\"Age > 18 years\", xlabel=\"height (cm)\")\n\nscatter!(ax1, df.height, df.weight; plotargs...)\nscatter!(ax2, df18.height, df18.weight; plotargs...)\n\nfig\n\n\n\n\n\n\n\nModeling the Data Generating Process\nFor the adults-only data, a simple linear regression model seems to capture the relationship between height and weight well. There are two equivalent ways to specify such a model. The first uses the direct specification of a distribution for our outcome observations:\n\\[\n\\begin{align}\n\\textrm{weight}_i &\\sim \\textrm{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\alpha + \\beta \\textrm{height}_i\n\\end{align}\n\\]\nThe second way instead places the distribution on the errors or residuals (\\(\\epsilon_i\\)), i.e., the deviations of the observations from the regression line:\n\\[\n\\begin{align}\n\\textrm{weight}_i &= \\alpha + \\beta \\textrm{height}_i + \\epsilon_i \\\\\n\\epsilon_i &\\sim \\textrm{Normal}(0, \\sigma)\n\\end{align}\n\\]\nAs for the globe tossing model in week 1, we specify a simulation procedure for this model to generate fake data for some height and known values of the parameters. We chose the second of the two above representations by generating a mean zero residual and adding it to the regression line at some height \\(H\\):\n\nfunction simulate_weight(H; β, σ)\n    U = rand(Normal(0, σ))\n    β*H + U\nend;\n\nNote that a full specification usually also includes the regression line intercept (often denoted \\(\\alpha\\)), which is implicitly set to zero in this simulation, i.e., a person with height zero is assumed to have weight zero.\nWith this function, we can, e.g., simulate the weight of a person that is 1,58m tall. If you run the function multiple times it will return different values. This is the case due to the DGP’s inherent randomness, controlled here by \\(\\sigma\\):\n\nsimulate_weight(158; β=0.5, σ=5)\n\n76.90076300060447\n\n\n\nheights = rand(Uniform(130, 170), 200)\nweights = simulate_weight.(heights; β=0.5, σ=5)\nscatter(heights, weights; figure=(;resolution=(600, 400)), label = \"Simulated data\", plotargs...)\nlines!([130, 170], [130, 170] .* 0.5; label = \"True regression line\")\naxislegend(position=:lt); current_figure()\n\n\n\n\n\n\nBayesian Inference\nWe are now ready to estimate the unknown parameters specifying the relationship between height and weight based on observed data. In the context of Bayesian inerence, this means that we need to specify the joint distribution, or equivalently the likelihood and prior. In Julia, one way to do this is to use the probabilistic programming language Turing.jl:\n\nusing Turing\nusing Optim\nusing StatsBase: vcov\nusing LinearAlgebra\nusing StructArrays\n\n\n@model function linear_regression(weights, heights)\n    # Prior\n    α ~ Normal(0, 10)\n    β ~ Normal(0, 10)\n    σ ~ Exponential(3)\n    # Likelihood\n    for i in eachindex(weights)\n        weights[i] ~ Normal(α + β*heights[i], σ)\n    end\nend;\n\nFor models of intermediate complexity, the lecture uses the quadratic or laplace approximation, which approximates the posterior distribution with a multivariate normal centered at its mode. The mode, i.e., the set of parameters for which the posterior density is maximized, can be found with some numerical optimization procedure:\n\nfunction quadratic_approximation(model)\n    est = optimize(model, MAP())\n    cov = Symmetric(vcov(est).array)\n    MvNormal(est.values.array, cov)\nend;\n\nWith this in place, we can now instantiate the model and produce a fit with the quadratic approximation:\n\nmodel = linear_regression(df18.weight, df18.height);\n\n\nfit = quadratic_approximation(model)\n\nFullNormal(\ndim: 3\nμ: [-42.72276499925268, 0.5676940648986761, 4.257576192003125]\nΣ: [17.56788069979583 -0.11331631032764365 0.09179910304229999; -0.11331631032764365 0.0007330978295219955 -0.0005921225497363611; 0.09179910304229999 -0.0005921225497363611 0.02651452713237138]\n)\n\n\nBecause the result is a distribution (a multivariate normal, as mentioned above), we can use the usual interface to, e.g., draw random samples from the posterior via rand(). We here wrap this into a small helper function which adds parameter names to the resulting random samples and wraps them into a StructArray for easier processing:\n\nfunction posterior_samples(fit; S=1000)\n    r = rand(fit, S)\n    r = map(eachcol(r)) do s\n        NamedTuple{(:α, :β, :σ)}(s)\n    end\n    StructArray(r)\nend;\n\nWith this function, it is now easy to draw a number regression lines from the posterior distribution and plot them with our data:\n\nfunction plot_model_and_data(heights, weights, fit)\n    fig = Figure(resolution=(800, 400))\n    ax = Axis(fig[1,1])\n    scatter!(ax, heights, weights; plotargs...)\n    samples = posterior_samples(fit; S=50)\n    for s in samples\n        lines!(ax, [130, 190], s.α .+ [130, 190] .* s.β; color=(:black, .4))\n    end\n\n    fig\nend; \n\n\nplot_model_and_data(df18.height, df18.weight, fit)\n\n\n\n\n\n\nDigression: Building an unnormalized posterior density by hand\nFor inference, Turing turns the model specification into a function evaluating the log joint for a given set of parameter values, which can then be used by some inference algorithm (such as the quadratic approximation). Instead of using the Turing specification, we could also build this function by hand.\nWe start with the (log) likelihood, which for a given set of parameter values is just the sum of the log probability densities of each observation’s weight under a normal distribution, with the mean given by the regression line induced by parameters \\(\\alpha\\) and \\(\\beta\\) at that observation’s height and residual standard deviation \\(\\sigma\\):\n\nfunction loglikelihood(α, β, σ; weights, heights)\n    sum(eachindex(weights)) do i\n        logpdf(Normal(α + β*heights[i], σ), weights[i])\n    end\nend;\n\nWe pick a set of parameter values with which to evaluate our function:\n\nα, β, σ = 0, 0.5, 5\n\n(0, 0.5, 5)\n\n\n\nloglikelihood(α, β, σ; weights, heights)\n\n-602.3332097464596\n\n\nSimilarly, the prior evaluates the log density for each parameter value under the corresponding prior distribution:\n\nfunction logprior(α, β, σ)\n    logpdf(Normal(0,10), α) + \n    logpdf(Normal(0,10), β) + \n    logpdf(Exponential(3), σ)\nend;\n\n\nlogprior(α, β, σ)\n\n-9.209576207732212\n\n\nThe log joint is then just the sum of the log likelihood and the log prior:\n\nfunction logjoint(α, β, σ; weights, heights) \n    loglikelihood(α, β, σ; weights, heights) + logprior(α, β, σ)\nend;\n\n\nlogjoint(α, β, σ; weights, heights)\n\n-611.5427859541918"
  }
]