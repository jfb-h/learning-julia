[
  {
    "objectID": "agenda.html",
    "href": "agenda.html",
    "title": "Agenda",
    "section": "",
    "text": "Programming basics recap\nMore Julia fundamentals\n\nThe type system & multiple dispatch\nPackages, environments and project organization\nPerformance optimization\n\nCode organization and git / github\n\n\n\n\nThe official Julia documentation\nThe Julia discourse forum\nYoutube video on developing Julia packages\nThe git and github documentation\nOnline git tutorials"
  },
  {
    "objectID": "agenda.html#data-science-toolkit",
    "href": "agenda.html#data-science-toolkit",
    "title": "Agenda",
    "section": "Data Science Toolkit",
    "text": "Data Science Toolkit\n\nTabular data and DataFrames.jl\nVisualization and Makie.jl\nNetwork analysis and Graphs.jl\n\n\nReferences & Materials\n\nThe docs: Makie.jl, DataFrames.jl, Graphs.jl\nThe Beautiful Makie website, with many nice plotting examples\nThe Julia Data Science online book, containing many simple examples\nThe 2022 book Julia for Data Analysis\nThe blog of Bogumli Kaminski, author of the DataFrames.jl package"
  },
  {
    "objectID": "agenda.html#bayesian-modeling",
    "href": "agenda.html#bayesian-modeling",
    "title": "Agenda",
    "section": "Bayesian Modeling",
    "text": "Bayesian Modeling\n\nProbabilistic programming with Turing.jl\nProbabilistic programming with Stan\nLow-level interface with LogDensityProblems.jl, TransformVariables.jl and DynamicHMC.jl\n\n\nReferences & Materials\n\nThe book Statistical Rethinking and Youtube lecture by Richard McElreath\nThe book Regression and Other Stories by Andrew Gelman et al.\nThe excellent Stan documentation"
  },
  {
    "objectID": "agenda.html#project-topics",
    "href": "agenda.html#project-topics",
    "title": "Agenda",
    "section": "Project Topics",
    "text": "Project Topics\n\nMain path analysis and MainPaths.jl\nPatent analytics\n\nJuliaPatents: PatentsBase.jl, PatentsLens.jl, PatentsLandscapes.jl\nData sources: EPO PATSTAT, Lens.org\n\nSurvey analysis"
  },
  {
    "objectID": "agenda.html#further-topics",
    "href": "agenda.html#further-topics",
    "title": "Agenda",
    "section": "Further Topics",
    "text": "Further Topics\n\nAgent-based models and Agents.jl\nDifferential equation models and DifferentialEquations.jl"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning Julia",
    "section": "",
    "text": "This website contains materials used in a self-organized learning endeavour that includes programming (primarily in the Julia language), statistics (primarily of the Bayesian kind) and all other things that are of interest to us (primarily network analysis and patent analytics)."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html",
    "href": "pages/bayes/coinflip_ldp.html",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "",
    "text": "This is a tutorial on how to use the LogDensityProblems.jl ecosystem for Bayesian inference. Compared to other packages, such as Turing.jl, this approach is a bit more low-level, with the upside of being more hackable and being insightful for learning purposes."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#setup",
    "href": "pages/bayes/coinflip_ldp.html#setup",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Setup",
    "text": "Setup\nFor this exercise, we’re interested in performing inference on a simple data-generating process where a possibly biased coin is flipped \\(N=100\\) times. More formally, we could state this like so:\n\\[\ny_i \\sim \\mathrm{Bernoulli}(p) \\textrm{ for } i = 1,2,...,100\n\\]\nWe start by simulating data from a Bernoulli distribution with the probability of heads set to \\(p = 0.7\\), which for the inverse problem is going to be the unknown quantity of interest to be inferred from observed data.\n\nusing Distributions\n\n\nN = 100\np = 0.7\nd = Bernoulli(p)\ndata = rand(d, N);\n\n\nNote: The avid reader will notice that this problem could also be more efficiently represented by making use of independence between the flips, in which case we could just record the total number of flips and the number of heads and make use of the binomial distribution. However, for sake of consistency we here stick to the Bernoulli representation."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-definition",
    "href": "pages/bayes/coinflip_ldp.html#model-definition",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model definition",
    "text": "Model definition\nHaving simulated data for inference, we now proceed to the model definition using the LogDensityProblems interface package. We store the flips in a struct called CoinflipProblem:\n\nstruct CoinflipProblem\n  flips::Vector{Bool}\nend;\n\nThe centerpiece of most modern Bayesian inference methods is the unnormalized log probability density function of the posterior distribution, which indicates how well a given parameter value fits the evidence provided by our data (encoded in the loglikelihood function) and our prior beliefs. For our numerical estimation procedure, it guides our search of the parameter space to obtain a representative set of draws from the posterior distribution.\nWe start by specifying the loglikelihood function, which, for a given value \\(p\\), is the sum of the log probability densities of each of our flips under a \\(\\textrm{Bernoulli}(p)\\) distribution:\n\nfunction loglik(p::Real, flips::Vector{Bool})\n  sum(y -> logpdf(Bernoulli(p), y), flips)\nend;\n\nNext to the likelihood function which makes use of the information from the data, we also need to specify a prior distribution which encodes our prior (before having seen the data) belief about \\(p\\). Here, we’re going to be broadly skeptical of extremely biased coins and use a \\(\\mathrm{Beta}(2,2)\\) prior:\n\nfunction logpri(p::Real)\n  logpdf(Beta(2,2), p)\nend;\n\nHere’s a plot of what that looks like:\n\nusing CairoMakie\nplot(Beta(2,2))\n\n\n\n\nWe now make our problem struct callable on an input parameter \\(\\theta\\), which is just a ‘container’ holding our actual parameter of interest, \\(p\\), but could also contain other parameters. Calling the struct on a given \\(\\theta\\) returns the sum of the log density of the prior and the log likelihood, a.k.a. the log posterior density evaluated at \\(p\\).\n\nfunction (problem::CoinflipProblem)(θ)\n  (; flips) = problem\n  (; p) = θ\n  logpri(p) + loglik(p, flips)\nend  \n\nWe can instantiate our CoinflipProblem with the data and call it to evaluate the log posterior density at a couple of values for \\(p\\):\n\nproblem = CoinflipProblem(data)\nproblem((; p=0.1)), problem((; p=0.5)), problem((; p=0.9))\n\n(-173.7468564280865, -68.90925294788643, -68.28007671594813)\n\n\nWhile the actual values of the log posterior density are not immediately that useful, we can already infer that, given the data and our prior beliefs, \\(p=0.5\\) is deemed similarly likely compared to \\(p=0.9\\) and much more likely than \\(p=0.1\\)."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-estimation",
    "href": "pages/bayes/coinflip_ldp.html#model-estimation",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model estimation",
    "text": "Model estimation\nHaving defined a way to evaluate the posterior density for a given parameter value, we now want a full representation of the posterior distribution to draw conclusions about the coin. While for simple problems, like the one presented here, a closed-form analytical solution is available, a more general method which also works for complicated models is to draw a large number of samples from the posterior distribution. Based on these samples, one can easily derive statements about certain summaries of the posterior distribution (e.g., its mean and standard deviation) or visualize it.\nA general purpose numerical procedure for obtaining samples from the posterior distribution, using the unnormalized log posterior density function (as specified above) and its gradient, is Hamiltonian Monte Carlo (HMC) and its variants.\nAs more of an implementation detail, HMC operates on the unconstrained reals but our parameter \\(p\\) is confined to the unit interval \\((0,1)\\) so we need an appropriate transformation, which is conveniently available in the TransformedLogDensities package. As mentioned, HMC furthermore requires the gradient of the posterior density, which we can conveniently obtain via automatic differentiation, in this case using the ForwardDiff package.\n\nusing LogDensityProblems\nusing TransformVariables, TransformedLogDensities\nusing LogDensityProblemsAD, ForwardDiff\n\ntransformation = as((p=as_unit_interval,))\ntran = TransformedLogDensity(transformation, problem)\ngrad = ADgradient(:ForwardDiff, tran)\n\n[ Info: Precompiling TransformVariables [84d833dd-6860-57f9-a1a7-6da5db126cff]\n\n\n[ Info: Precompiling TransformedLogDensities [f9bc47f6-f3f8-4f3b-ab21-f8bc73906f26]\n\n\nForwardDiff AD wrapper for TransformedLogDensity of dimension 1, w/ chunk size 1\n\n\nWe can now evaluate the logdensity and its gradient:\n\nLogDensityProblems.logdensity_and_gradient(grad, zeros(1))\n\n(-70.29554730900632, [24.0])\n\n\nWith this in place, we can now draw a large number of samples (say, \\(S=2000\\)) from the posterior distribution using the HMC implementation in DynamicHMC. We use the ThreadsX package to sample \\(k\\) chains in parallel:\n\nusing Random\nusing DynamicHMC\nusing ThreadsX\n\nfunction sample(grad, S, k; rng=Random.default_rng()) \n   ThreadsX.map(1:k) do _\n     mcmc_with_warmup(rng, grad, S; reporter=NoProgressReport())\n   end\nend\n\nresult = sample(grad, 2000, 4)\n\n[ Info: Precompiling DynamicHMC [bbc10e6e-7c05-544b-b16e-64fede858acb]\n\n\n[ Info: Precompiling ThreadsX [ac1d9e8a-700a-412c-b207-f0111f4b6c0d]\n\n\nWARNING: method definition for OneHotArray at C:\\Users\\Jakob\\.julia\\packages\\MicroCollections\\yJPLe\\src\\onehot.jl:79 declares type variable N but does not use it.\n\n\n4-element Vector{NamedTuple{(:posterior_matrix, :tree_statistics, :κ, :ϵ), Tuple{Matrix{Float64}, Vector{DynamicHMC.TreeStatisticsNUTS}, GaussianKineticEnergy{LinearAlgebra.Diagonal{Float64, Vector{Float64}}, LinearAlgebra.Diagonal{Float64, Vector{Float64}}}, Float64}}}:\n (posterior_matrix = [1.237352129757079 1.2302127691294114 … 0.4051108586210541 0.9916228147949389], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-60.03521705159663, 1, turning at positions -1:0, 0.8619358362099404, 1, DynamicHMC.Directions(0xe47f783a)), DynamicHMC.TreeStatisticsNUTS(-59.43450873902836, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0xb62afed2)), DynamicHMC.TreeStatisticsNUTS(-63.08127373685771, 1, turning at positions -1:-2, 0.6444400419576822, 3, DynamicHMC.Directions(0x7e406e49)), DynamicHMC.TreeStatisticsNUTS(-62.54041283633085, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xd446ba3d)), DynamicHMC.TreeStatisticsNUTS(-60.80427888393228, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0x658ceed6)), DynamicHMC.TreeStatisticsNUTS(-60.2095371567753, 2, turning at positions -3:0, 0.8407115011896157, 3, DynamicHMC.Directions(0x3f12e894)), DynamicHMC.TreeStatisticsNUTS(-58.90912976989471, 1, turning at positions -1:-2, 0.9814390632044868, 3, DynamicHMC.Directions(0x4eaf38c5)), DynamicHMC.TreeStatisticsNUTS(-58.889351843527635, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0x1feffed0)), DynamicHMC.TreeStatisticsNUTS(-58.85643996949996, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0x1946bdd6)), DynamicHMC.TreeStatisticsNUTS(-58.878040693021845, 2, turning at positions -2:1, 0.9961409071487842, 3, DynamicHMC.Directions(0x9c80ebf9))  …  DynamicHMC.TreeStatisticsNUTS(-58.877748492071554, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x8c05e89b)), DynamicHMC.TreeStatisticsNUTS(-58.877139895997, 1, turning at positions -1:0, 0.9988695704468663, 1, DynamicHMC.Directions(0x80815d4a)), DynamicHMC.TreeStatisticsNUTS(-60.17785906531592, 1, turning at positions -1:-2, 0.8127987989748617, 3, DynamicHMC.Directions(0xa3afafa1)), DynamicHMC.TreeStatisticsNUTS(-60.07057125947096, 2, turning at positions -1:2, 0.9564744722762911, 3, DynamicHMC.Directions(0xd6f5cf0a)), DynamicHMC.TreeStatisticsNUTS(-59.471404102889004, 1, turning at positions 0:1, 0.9813776348099524, 1, DynamicHMC.Directions(0x0449f87b)), DynamicHMC.TreeStatisticsNUTS(-59.335367146719825, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0x490afa32)), DynamicHMC.TreeStatisticsNUTS(-60.04096388459869, 2, turning at positions 0:3, 0.8864383652987424, 3, DynamicHMC.Directions(0x6f343fff)), DynamicHMC.TreeStatisticsNUTS(-58.99132615644301, 1, turning at positions -1:-2, 0.9679604160653339, 3, DynamicHMC.Directions(0xb696419d)), DynamicHMC.TreeStatisticsNUTS(-62.830727194306654, 2, turning at positions 0:3, 0.7329900658647063, 3, DynamicHMC.Directions(0x079663cf)), DynamicHMC.TreeStatisticsNUTS(-63.09397487021842, 1, turning at positions -2:-3, 0.9424379653175525, 3, DynamicHMC.Directions(0xdb830c10))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.23284189517614914], ϵ = 0.8625204990400276)\n (posterior_matrix = [0.6521085775355872 0.5622395527016973 … 1.1969375924661771 0.6542198799300295], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-60.50825455076523, 2, turning at positions -2:1, 0.9999999999999999, 3, DynamicHMC.Directions(0xc02f5889)), DynamicHMC.TreeStatisticsNUTS(-61.06644824823851, 1, turning at positions -1:0, 0.8040506881712481, 1, DynamicHMC.Directions(0x20757e6e)), DynamicHMC.TreeStatisticsNUTS(-61.874269247041404, 1, turning at positions 0:1, 0.8516735196740729, 1, DynamicHMC.Directions(0x96fb8511)), DynamicHMC.TreeStatisticsNUTS(-60.84858699449818, 1, turning at positions 2:3, 0.9999999999999999, 3, DynamicHMC.Directions(0x43922503)), DynamicHMC.TreeStatisticsNUTS(-59.10970852447182, 1, turning at positions 0:1, 0.9930376522117831, 1, DynamicHMC.Directions(0x0b274593)), DynamicHMC.TreeStatisticsNUTS(-59.31865604680513, 1, turning at positions -1:0, 0.9406302966633421, 1, DynamicHMC.Directions(0xaff72e98)), DynamicHMC.TreeStatisticsNUTS(-59.45095618289309, 1, turning at positions 0:1, 0.9890961507989432, 1, DynamicHMC.Directions(0x31ec503d)), DynamicHMC.TreeStatisticsNUTS(-59.226891372765564, 2, turning at positions -1:2, 0.9999999999999999, 3, DynamicHMC.Directions(0xd1c69f1e)), DynamicHMC.TreeStatisticsNUTS(-59.07202775509243, 1, turning at positions -1:0, 0.9663790451548401, 1, DynamicHMC.Directions(0x747827b6)), DynamicHMC.TreeStatisticsNUTS(-59.012014297118846, 1, turning at positions 2:3, 0.9999999999999999, 3, DynamicHMC.Directions(0x9ff55fbb))  …  DynamicHMC.TreeStatisticsNUTS(-60.02229128529136, 2, turning at positions -2:1, 0.9383465938154414, 3, DynamicHMC.Directions(0xe5871491)), DynamicHMC.TreeStatisticsNUTS(-59.04216070220351, 1, turning at positions -1:0, 0.9580115529961512, 1, DynamicHMC.Directions(0xdf98b466)), DynamicHMC.TreeStatisticsNUTS(-59.714939954183514, 1, turning at positions -1:-2, 0.9211996412614328, 3, DynamicHMC.Directions(0xfa50e005)), DynamicHMC.TreeStatisticsNUTS(-59.37804985804822, 2, turning at positions -2:1, 0.9794433126995413, 3, DynamicHMC.Directions(0xd8476bc5)), DynamicHMC.TreeStatisticsNUTS(-59.27187791143722, 1, turning at positions 2:3, 0.9959970286278662, 3, DynamicHMC.Directions(0x9a82685b)), DynamicHMC.TreeStatisticsNUTS(-59.02114007577439, 1, turning at positions -1:0, 0.964234385287469, 1, DynamicHMC.Directions(0x3646c484)), DynamicHMC.TreeStatisticsNUTS(-59.16266997148292, 1, turning at positions -1:0, 0.9752959362043394, 1, DynamicHMC.Directions(0xb13c091c)), DynamicHMC.TreeStatisticsNUTS(-59.84195318373271, 1, turning at positions 0:1, 0.8592941994168705, 1, DynamicHMC.Directions(0xb22ebd41)), DynamicHMC.TreeStatisticsNUTS(-59.70284787851327, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xdb80f099)), DynamicHMC.TreeStatisticsNUTS(-61.468314355170925, 1, turning at positions -1:-2, 0.7242306753516999, 3, DynamicHMC.Directions(0x158c9641))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.22150112461145507], ϵ = 0.9803410251707266)\n (posterior_matrix = [0.8239267228062341 1.0453935180041143 … 1.1486090725184788 1.107928121964305], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-59.25727496379792, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xc0e26981)), DynamicHMC.TreeStatisticsNUTS(-59.231663880771166, 1, turning at positions 2:3, 0.9801026256927926, 3, DynamicHMC.Directions(0xdf6e5a87)), DynamicHMC.TreeStatisticsNUTS(-59.31410935890203, 2, turning at positions 0:3, 0.9383338560977768, 3, DynamicHMC.Directions(0x6d71c1a3)), DynamicHMC.TreeStatisticsNUTS(-59.685998752188745, 2, turning at positions -2:1, 0.9551140824114365, 3, DynamicHMC.Directions(0x0d25a165)), DynamicHMC.TreeStatisticsNUTS(-59.68207583845759, 2, turning at positions -2:1, 0.9596665918075442, 3, DynamicHMC.Directions(0x2da015e1)), DynamicHMC.TreeStatisticsNUTS(-59.54502036704666, 1, turning at positions -2:-3, 0.992566179569236, 3, DynamicHMC.Directions(0x559186c4)), DynamicHMC.TreeStatisticsNUTS(-60.65301129038072, 1, turning at positions 1:2, 0.744344326287278, 3, DynamicHMC.Directions(0x43fb61c2)), DynamicHMC.TreeStatisticsNUTS(-61.86091941589409, 1, turning at positions -1:0, 0.5881099386536112, 1, DynamicHMC.Directions(0x737e6ef0)), DynamicHMC.TreeStatisticsNUTS(-62.675323714445796, 1, turning at positions -1:0, 0.9814556285015132, 1, DynamicHMC.Directions(0x0d344d52)), DynamicHMC.TreeStatisticsNUTS(-62.75628455982401, 2, turning at positions -2:1, 0.8858399401624836, 3, DynamicHMC.Directions(0xb66f6b39))  …  DynamicHMC.TreeStatisticsNUTS(-59.04897517528838, 2, turning at positions -4:-5, 0.9734382478856378, 7, DynamicHMC.Directions(0xd13fc472)), DynamicHMC.TreeStatisticsNUTS(-58.85342601367561, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x09f78ce5)), DynamicHMC.TreeStatisticsNUTS(-59.681020312848844, 1, turning at positions -1:-2, 0.8560456185497953, 3, DynamicHMC.Directions(0x694fcf01)), DynamicHMC.TreeStatisticsNUTS(-59.25530706968609, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xda4ab8f9)), DynamicHMC.TreeStatisticsNUTS(-58.912753485803705, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xfe616305)), DynamicHMC.TreeStatisticsNUTS(-59.0902389490372, 2, turning at positions 0:3, 0.967284646720787, 3, DynamicHMC.Directions(0xba32ec47)), DynamicHMC.TreeStatisticsNUTS(-59.010754972452744, 2, turning at positions 4:5, 0.9822912483602833, 7, DynamicHMC.Directions(0x460e1d2d)), DynamicHMC.TreeStatisticsNUTS(-59.47793811667633, 2, turning at positions -2:1, 0.9464317604292868, 3, DynamicHMC.Directions(0x87d1e5e5)), DynamicHMC.TreeStatisticsNUTS(-59.495963347181096, 1, turning at positions 2:3, 0.9300016332557717, 3, DynamicHMC.Directions(0x8521cf07)), DynamicHMC.TreeStatisticsNUTS(-58.997724066564814, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0xfec4858f))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.22746897137870167], ϵ = 0.953180512315083)\n (posterior_matrix = [0.6503627112255115 0.6503627112255115 … 1.0039940176970676 0.9832009619157447], tree_statistics = [DynamicHMC.TreeStatisticsNUTS(-60.75562964538636, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x6ec1bdd1)), DynamicHMC.TreeStatisticsNUTS(-62.276536812102925, 1, turning at positions -1:0, 0.4700148119576759, 1, DynamicHMC.Directions(0x5fe76a2e)), DynamicHMC.TreeStatisticsNUTS(-60.43250350477299, 1, turning at positions -2:-3, 0.9471998908844329, 3, DynamicHMC.Directions(0x4489c834)), DynamicHMC.TreeStatisticsNUTS(-59.69016584475995, 1, turning at positions 1:2, 0.8626416020356391, 3, DynamicHMC.Directions(0x00a1eba6)), DynamicHMC.TreeStatisticsNUTS(-60.02974961558872, 1, turning at positions 0:1, 0.855018808460891, 1, DynamicHMC.Directions(0x4b7f1fd1)), DynamicHMC.TreeStatisticsNUTS(-60.428908056883884, 2, turning at positions -2:1, 0.9848264748306219, 3, DynamicHMC.Directions(0x1b86b979)), DynamicHMC.TreeStatisticsNUTS(-59.98327518987849, 1, turning at positions 0:1, 1.0, 1, DynamicHMC.Directions(0x6b206dbb)), DynamicHMC.TreeStatisticsNUTS(-59.23880491557945, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0xdb14de58)), DynamicHMC.TreeStatisticsNUTS(-59.44000293452166, 1, turning at positions -1:-2, 0.9487829774401134, 3, DynamicHMC.Directions(0xc32755cd)), DynamicHMC.TreeStatisticsNUTS(-59.524400091610026, 1, turning at positions -2:-3, 0.9455225309780922, 3, DynamicHMC.Directions(0xa7808ad4))  …  DynamicHMC.TreeStatisticsNUTS(-61.04037509877977, 1, turning at positions 1:2, 0.6726969646100532, 3, DynamicHMC.Directions(0xc94acac6)), DynamicHMC.TreeStatisticsNUTS(-60.38731011929896, 1, turning at positions -1:0, 1.0, 1, DynamicHMC.Directions(0xa400712c)), DynamicHMC.TreeStatisticsNUTS(-60.03450307186939, 1, turning at positions -1:0, 0.7997707437120574, 1, DynamicHMC.Directions(0x9539cb7c)), DynamicHMC.TreeStatisticsNUTS(-59.85923334715609, 1, turning at positions -1:0, 0.8897391213602417, 1, DynamicHMC.Directions(0x62ce08be)), DynamicHMC.TreeStatisticsNUTS(-60.40371504454108, 1, turning at positions 0:1, 0.8971783552076404, 1, DynamicHMC.Directions(0x9aab18bb)), DynamicHMC.TreeStatisticsNUTS(-61.05569654275112, 1, turning at positions -1:0, 0.8645145991781742, 1, DynamicHMC.Directions(0x3476cdb6)), DynamicHMC.TreeStatisticsNUTS(-61.078878952200206, 1, turning at positions 2:3, 0.962887275243275, 3, DynamicHMC.Directions(0x2e4b8b8f)), DynamicHMC.TreeStatisticsNUTS(-58.82650324788295, 2, turning at positions -3:0, 0.99627702707574, 3, DynamicHMC.Directions(0x1aac3b9c)), DynamicHMC.TreeStatisticsNUTS(-58.8361741745837, 1, turning at positions -2:-3, 0.9985363075907622, 3, DynamicHMC.Directions(0x32c45268)), DynamicHMC.TreeStatisticsNUTS(-58.78984375150517, 2, turning at positions 0:3, 0.9997816220562452, 3, DynamicHMC.Directions(0x661f3b2b))], κ = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.2228691277135257], ϵ = 0.9290089700829719)\n\n\nThe result is a vector of length \\(k\\), each element of which contains for each chain the posterior samples as well as some statistics about the sampling procedure, which can be used to check if everything went as planned."
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-checking",
    "href": "pages/bayes/coinflip_ldp.html#model-checking",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model checking",
    "text": "Model checking\nHaving obtained samples from the posterior distribution, we’re in principle ready to use our model for inference, i.e., answer the question of whether our coin is biased and by how much, and how certain we can be of the answer based on the data we have seen.\nHowever, before we jump to inference, it is good practice to perform some model checks: Our estimates rely on a numerical sampling scheme, which can fail, rendering the results unreliable.\n\nusing MCMCDiagnosticTools\nusing DynamicHMC.Diagnostics\n\n[ Info: Precompiling MCMCDiagnosticTools [be115224-59cd-429b-ad48-344e309966f0]\n\n\nFirst, we can check the effective sample size (ess). In Markov chain monte carlo (MCMC) approaches, samples are often correlated, meaning that the total number of ‘effective’ samples is less than obtained by an uncorrelated sampling procedure because consecutive samples carry some of the same information.\n\ness, Rhat =  ess_rhat(stack_posterior_matrices(result))\n\n([2875.7141982094977], [1.0003811756977017])\n\n\n\nsummarize_tree_statistics.(getfield.(result, :tree_statistics))\n\n4-element Vector{DynamicHMC.Diagnostics.TreeStatisticsSummary{Float64, NamedTuple{(:max_depth, :divergence, :turning), Tuple{Int64, Int64, Int64}}}}:\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.94, 5/25/50/75/95%: 0.77 0.91 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 59%, 2 => 41%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.93, 5/25/50/75/95%: 0.71 0.9 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 66%, 2 => 34%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.93, 5/25/50/75/95%: 0.71 0.89 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 64%, 2 => 36%\n Hamiltonian Monte Carlo sample of length 2000\n  acceptance rate mean: 0.93, 5/25/50/75/95%: 0.74 0.9 0.97 1.0 1.0\n  termination: divergence => 0%, max_depth => 0%, turning => 100%\n  depth: 0 => 0%, 1 => 62%, 2 => 38%"
  },
  {
    "objectID": "pages/bayes/coinflip_ldp.html#model-inference",
    "href": "pages/bayes/coinflip_ldp.html#model-inference",
    "title": "Bayesian inference for a sequence of coinflips",
    "section": "Model inference",
    "text": "Model inference\n\nusing StructArrays\n\nfunction posterior(result)\n  samples = eachcol(pool_posterior_matrices(result))\n  StructArray(transform.(transformation, samples))\nend\n\npost = posterior(result);\n\n\nfunction summarize(post)\n  m, s = round.((mean(post.p), std(post.p)); digits=2)\n  println(\"posterior mean: \", m)\n  println(\"posterior sd: \", s)\nend\n\nsummarize(post)\n\nposterior mean: 0.73\nposterior sd: 0.04\n\n\n\nfunction plot_inferred_vs_true(post, p_true)\n  fig = Figure(); ax = Axis(fig[1,1])\n  density!(ax, post.p; color=:grey20)\n  vlines!(ax, p_true; linewidth=2)\n  fig\nend\n\nplot_inferred_vs_true(post, p)"
  },
  {
    "objectID": "pages/programming_recap.html",
    "href": "pages/programming_recap.html",
    "title": "Programming Basics",
    "section": "",
    "text": "Exercise 1\nWrite a function that takes in a name and prints out a greeting, e.g., “Hello, Daniel”.\n\n\nSolution\ngreet(name) = println(\"Hello, $(name)!\")\ngreet(\"Daniel\")\n\n\nHello, Daniel!\n\n\n\n\nExercise 2\nWrite a function which greets the users whose name starts with a ‘D’ in Spanish, users whose name starts with a ‘C’ in German, and everyone else in English.\n\n\nSolution\nfunction greet(name)\n    firstletter = first(name)\n    if firstletter == 'D'\n        println(\"Hola, $(name)!\")\n    elseif firstletter == 'C'\n        println(\"Hallo, $(name)!\")\n    else\n        println(\"Hello, $(name)!\")\n    end\nend\n\ngreet(\"Denise\")\ngreet(\"Clara\")\ngreet(\"Marius\")\n\n\nHola, Denise!\nHallo, Clara!\nHello, Marius!\n\n\n\n\nExercise 3\nWrite a function which takes an array of numbers as input and returns their sum, without using the built-in function sum.\n\n\nSolution\nfunction mysum(arr)\n    res = zero(eltype(arr))\n    for x in arr\n        res += x\n    end\n    res\nend\n\n@show mysum([1,2,3,4,5]);\n\n\nmysum([1, 2, 3, 4, 5]) = 15\n\n\n\n\nExercise 4\nWrite a function which takes an array of numbers as input and returns their sum of squares.\n\n\nSolution\nsum_of_squares(arr) = sum(x -> x^2, arr) \n# or mapreduce(x -> x^2, +, arr)\n@show sum_of_squares([1,2,3]);\n\n\nsum_of_squares([1, 2, 3]) = 14\n\n\n\n\nExercise 5\nWrite a function which takes an array of numbers as input and returns the largest element.\n\n\nSolution\nlargest_element(arr) = findmax(arr)[1]\n@show largest_element([5,2,1,7]);\n\n\nlargest_element([5, 2, 1, 7]) = 7\n\n\n\n\nExercise 6\nWrite a function which takes an array of numbers as input and returns only those elements which are \\(>5\\). In a second step, write a more generic version which takes the limit as a second argument.\n\n\nSolution\ngreater_5(arr) = filter(>(5), arr)\ngreater_k(arr, k) = filter(>(k), arr)\n\n@show greater_5([1,2,3,4,5,6,7,8]);\n@show greater_k([1,2,3,4,5,6,7,8], 2);\n\n\ngreater_5([1, 2, 3, 4, 5, 6, 7, 8]) = [6, 7, 8]\ngreater_k([1, 2, 3, 4, 5, 6, 7, 8], 2) = [3, 4, 5, 6, 7, 8]\n\n\n\n\nExercise 7\nWrite a function which checks if an element is contained in an array.\n\n\nSolution\nx_in_arr(x, arr) = x in arr\n\n@show x_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]);\n\n\nx_in_arr(\"Daniel\", [\"Denise\", \"Daniel\", \"Jakob\"]) = true\n\n\n\n\nExercise 8\nWrite a function which takes a Matrix as input and returns the column-wise sums. In a second step, write a more generic version which takes an arbitrary reduction function (such as sum) as an additional argument and performs it column-wise.\n\n\nSolution\ncolsum(m) = sum(m; dims=1)\ncolop(op, m) = map(op, eachcol(m))\n\n@show colsum([1 2; 3 4]);\n@show colop(sum, [1 2; 3 4]);\n\n\ncolsum([1 2; 3 4]) = [4 6]\n\n\n\ncolop(sum, [1 2; 3 4]) = [4, 6]\n\n\n\n\nExercise 9\nWrite a function that concatenates two arrays. In a second step, write a function which concatenates two \\(n\\)-element arrays into a \\(n \\times 2\\) matrix.\n\n\nSolution\nconcatenate(a, b) = vcat(a, b)\nconcatenate_matrix(a, b) = hcat(a, b)\n\n@show concatenate([1,2], [3,4,5]);\n@show concatenate_matrix([1,2,3], [4,5,6]);\n\n\nconcatenate([1, 2], [3, 4, 5]) = [1, 2, 3, 4, 5]\n\n\nconcatenate_matrix([1, 2, 3], [4, 5, 6]) = [1 4; 2 5; 3 6]\n\n\n\n\nExercise 10\nWrite a function that takes a number and returns a function which multiplies its input by that number. Apply the generated function to each element of an array of 5 randomly generated numbers.\n\n\nSolution\ngenerate_mul_by_k(k) = x -> x * k\n\nmul_by_3 = generate_mul_by_k(3)\nmap(mul_by_3, rand(5))\n\n\n5-element Vector{Float64}:\n 0.9962839176283534\n 1.5094425777984743\n 2.943710021908225\n 2.2590201203635525\n 2.1150062390349658"
  },
  {
    "objectID": "pages/statistical-rethinking/week1.html",
    "href": "pages/statistical-rethinking/week1.html",
    "title": "Statistical Rethinking",
    "section": "",
    "text": "Bayesian Inference and Bayes Rule\nBayesian inference departs from a model for the joint distribution of all observed variables (data, \\(\\mathcal{D}\\)) and unobserved variables (parameters, \\(\\theta\\)):\n\\[ p(\\theta, \\mathcal{D}) = p(\\mathcal{D}|\\theta)p(\\theta) \\]\nThe factorization on the right hand side is a direct consequence of the definition of conditional probability (see box below).\nBayesian inference then relies on Bayes’ rule (from which it derives its name) to derive the posterior distribution of parameters \\(\\theta\\) conditional on observed data \\(\\mathcal{D}\\):\n\\[\np(\\theta | \\mathcal{D}) = \\frac{p(\\mathcal{D}|\\theta)p(\\theta)}{p({\\mathcal{D}})}\n\\]\n\nBayes Rule is just a restatement of the general definition of conditional probability:\n\\[\\mathrm{Pr}(A|B) := \\frac{\\mathrm{Pr}(A,B)}{\\mathrm{Pr}(B)}\\]\nThe numerator here is the joint probability, i.e. the probability that both \\(A\\) and \\(B\\) occur. The joint probability is also sometimes written as \\(p(A \\cap B)\\) (an intersection in set notation) and is symmetric with respect to its arguments: \\[\\mathrm{Pr}(A,B) = \\mathrm{Pr}(A|B)\\mathrm{Pr}(B) = \\mathrm{Pr}(B|A)\\mathrm{Pr}(A)\\] If we now replace the joint probability by the its conditioned representation in the definition above, we arive at Bayes Rule: \\[\\mathrm{Pr}(A|B) = \\frac{\\mathrm{Pr}(B|A)\\mathrm{Pr}(A)}{\\mathrm{Pr}(B)}\\]\n\nIn the context of Bayes’ rule, \\(p(\\mathcal{D}|\\theta)\\) (taken as a function of \\(\\theta\\) and not \\(\\mathcal{D}\\)) is called the likelihood and specifies how the data influence our inferences. \\(p(\\theta)\\) is called the prior and formalizes our beliefs on the parameters before having seen the data.\n\n\nGlobe Tossing\n\nSimulating the Data Generating Process\nGuided by the recommendation from the book, we start by writing a simple program which can simulate the globe tossing experiment. In this case, this just involves sampling ‘water’ or ‘land’ \\(N\\) times, with probabilities \\(\\theta\\) and \\(1-\\theta\\), respectively:\n\nusing StatsBase\n\nfunction simulate_globe(θ, N) \n    outcomes = [\"W\", \"L\"]\n    probabilities = [θ, 1-θ]\n    sample(outcomes, Weights(probabilities), N)\nend\n\nsimulate_globe(0.7, 5)\n\n5-element Vector{String}:\n \"L\"\n \"W\"\n \"W\"\n \"W\"\n \"W\"\n\n\nBecause in the end we just care about the count of ‘water’ throws among the \\(N\\) trials and the sum of independent Bernoulli trials is well modeled by the binomial distribution, we can also just use that to simulate our experiment:\n\nusing Distributions\n\nsimulate_globe_binomial(θ, N) = rand(Binomial(N, θ))\nsimulate_globe_binomial(0.7, 5)\n\n2\n\n\n\n\nThe Beta-Binomial Model\nFollowing the general process of Bayesian inference outlined above, we need a representation of the joint distribution of known and unknown variables, which we can factor into two components: (1) a sampling distribution that describes how the known variables are generated for given values of the unknowns and (2) a prior distribution over the unknowns.\nSampling distribution. The data generating process for the globe tossing example is well represented by a binomial sampling model, which specifies a distribution for the number of ‘successes’ (called \\(y\\), say occurrences of water) among a number of \\(N\\) trials, each with the same success probability \\(\\theta\\). To indicate that the random variable \\(y\\) follows a binomial distribution, we write:\n\\[ y \\sim \\mathrm{Binomial}(N, \\theta)\\]\nComputing the probability of an observed number of successes \\(y\\) for a given \\(\\theta\\) is then given by the probability mass function of the binomial distribution:\n\\[ p(y|\\theta) = \\mathrm{Binomial}(y | N, \\theta) = {N \\choose y} \\theta^y (1-\\theta)^{N-y},\\]\nwhere \\({N \\choose y} = \\frac{N!}{y!(N-y)!}\\) is called the binomial coefficient. In the context of the posterior distribution, where the right hand side of the above serves as the likelihood and is taken as a function of \\(\\theta\\), the binomial coefficient is constant (because it does not depend on \\(\\theta\\)), which is helpful in analytical derivations.\nHere is a plot of the binomial distribution for different values of \\(\\theta\\), with \\(N=50\\):\n\nusing CairoMakie\n\nfunction plotbinom(params)\n    tostring(p) = \"Binomial(50, $(p.θ))\"\n    fig = Figure()\n    ax = Axis(fig[1,1])\n    foreach(params) do p\n        d = Binomial(50, p.θ)\n        barplot!(ax, d; cycle=:color, label=tostring(p))\n    end\n    axislegend(ax; position=(:left, :top))\n    fig\nend\n\nparams = [(;θ=0.1), (;θ=0.5), (;θ=0.9)]\nplotbinom(params)\n\n\n\n\nPrior distribution. A natural prior for the parameter \\(\\theta\\) is the beta distribution, which is defined for the interval \\([0,1]\\) and thus fits the bounds of \\(\\theta\\) (which represents a proportion). The distribution has two paramteres, commonly called \\(\\alpha\\) and \\(\\beta\\), which control its shape.\nThe probability density function for the beta is given by:\n\\[\np(\\theta) = \\textrm{Beta}(\\theta | \\alpha, \\beta) = \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1}\n\\]\nThe factor involving the gamma functions \\(\\Gamma(\\cdot)\\) is a normalizing constant ensuring that the pdf integrates to 1 over the sample space. Here is a plot of the pdf with different values for \\(\\alpha\\) and \\(\\beta\\):\n\nfunction plotbeta(params)\n    tostring(p) = \"Beta($(p.α), $(p.β))\"\n    fig = Figure()\n    ax = Axis(fig[1,1])\n    foreach(params) do p\n        d = Beta(p...)\n        plot!(ax, d; cycle=:color, label=tostring(p))\n    end\n    axislegend(ax; position=(:left, :top))\n    fig\nend\n\nparams = [(;α=1, β=1), (;α=2, β=2), (;α=3, β=2)]\nplotbeta(params)\n\n\n\n\nPosterior distribution. The posterior distribtution is proportional to the prior times the likelihood (which is just the factored joint distribution):\n\\[\np(\\theta|\\mathcal{D}) \\propto p(\\mathcal{D}|\\theta)p(\\theta)\n\\]\nFor many analytical and numerical procedures the normalizing constant \\(p(\\mathcal{D}\\)) can be dropped. We here also make use of this fact to analytically derive the closed form posterior distribution. This is not generally possible, which is why numerical applications are so important in Bayesian inference.\nFollowing the choices above, the unnormalized posterior distribution is then the product of a binomial likelihood and a beta prior:\n\\[\n\\begin{align}\np(\\theta|\\mathcal{D}) &\\propto \\textrm{Binomial}(y|N, \\theta) \\times \\textrm{Beta}(\\theta|\\alpha, \\beta) \\\\\n&= {N \\choose y} \\theta^y (1-\\theta)^{N-y} \\frac{\\Gamma(\\alpha + \\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1}\n\\end{align}\n\\]\nWhile this looks intimidating at first, it is just the definitions for the binomial and beta pdf (or pmf) multiplied together. Just as we started by dropping the normalizing constant for the posterior distribution, we can now again drop the constants from the beta and binomial probability functions (i.e., everything not involving \\(\\theta\\), such as the binomial coefficient and the gamma functions):\n\\[\n\\begin{align}\np(\\theta|\\mathcal{D}) &\\propto \\theta^y (1-\\theta)^{N-y} \\theta^{\\alpha - 1} (1-\\theta)^{\\beta - 1} \\\\\n&= \\theta^{y + \\alpha - 1}(1-\\theta)^{N-y+\\beta-1}\n\\end{align}\n\\]\nThe result is the kernel of a beta distribution (i.e. a beta without the normalizing constant), from which we can conclude that the posterior is just another beta distribtution where the \\(\\alpha\\) and \\(\\beta\\) hyperparameters from the original prior distribution are updated based on the data, i.e.:\n\\[ \\theta | y \\sim \\textrm{Beta}(\\alpha + y, \\beta + N - y)\\]\nWrapped into a Julia function, this is a single line of code:\n\nglobe_posterior(y, N; α=2, β=2) = Beta(α + y, β + N - y);\n\nWith this, we’re now ready to run a simple simulation with, say, \\(N=100\\) throws:\n\n\nPlotting function\nfunction plot_prior_posterior(prior, posterior, true_θ)\n    fig = Figure(); ax = Axis(fig[1,1])\n    plot!(ax, prior; label=\"Prior\", cycle=:color)\n    plot!(ax, posterior; label=\"Posterior\", cycle=:color)\n    vlines!(ax, true_θ; label=\"True θ\", linewidth=3, color=:black)\n    axislegend(ax; position=(:left, :top))\n    fig\nend;\n\n\n\ntrue_θ = 0.7; N = 100\nthrows = simulate_globe(true_θ, N)\ny = sum(==(\"W\"), throws)\n\nprior = Beta(2,2)\nposterior = globe_posterior(y, N)\n\nplot_prior_posterior(prior, posterior, true_θ)\n\n\n\n\nBased on this, we can see how our diffuse prior on the proportion of water has been updated based on the data to a posterior that sits close to the true value of \\(\\theta = 0.7\\).\n\n\nDigression: Grid Approximation\nA different way to obtain the posterior distribution, relying on numerical approximation, is to compute the joint distribution (likelihood \\(\\times\\) prior) at a fine grid of values and then normalize this by dividing by the sum of the computed values.\n\njoint(N, y, θ) = pdf(Beta(1,1), θ) * pdf(Binomial(N, θ), y)\n\nfunction posterior_approx(N, y; P=1000)\n    grid = range(0, 1, P)\n    points = [joint(N, y, θ) for θ in grid]\n    posterior = points ./ sum(points)\n    sample(grid, Weights(posterior), 10_000; replace=true)\nend\n\npost = posterior_approx(N, y)\nhist(post; color=:grey80, strokewidth=1) \nvlines!(true_θ; color=:black, linewidth=2)\nxlims!(0, 1); current_figure()\n\n\n\n\nWhile this approach does not rely on mathematical conveniences such as conjugacy, it suffers from the curse of dimensionality: The number of grid points grows exponentially with the number of parameters and so grid approximation is only suited for very simiple problems.\n\n\n\nPrior & Posterior Predictions\nOften times, we are interested in the range of outcomes that would be reasonable to expect for a given prior or posterior distribution, i.e., the prior or posterior predictive distribution. Seeing how the model behaves for a given prior or posterior distribution is useful for model & research design, for model checking and validation, or for making forecasts.\nA particularly practical way to obtain the prior or posterior predictive distribution is via sampling many times from the prior or posterior and then for each sampled parameter value simulate an outcome from the observation model.\nFor the globe tossing example this could look like the following julia function:\n\nfunction predictive(N, prior_or_posterior; S=1000)\n    simulate(θ, N) = rand(Binomial(N, θ))\n    samples = rand(prior_or_posterior, S)\n    [simulate(θ, N) for θ in samples]\nend;\n\nWe can now use this to check what kinds of results the model would deem reasonable in an experiment with 100 globe throws, before seeing any data and just based on a flat \\(\\textrm{Beta}(1,1)\\) prior:\n\npriorpred = predictive(100, Beta(1,1))\nhist(priorpred; color=:grey80, strokewidth=1)\n\n\n\n\nThis indicates that, under the flat prior, a result of 0 out of 100 times water is seen as similarly likely as, e.g., 50 out of 100 times water, which is probably not that sensible.\nWe can perform a similar excercise but now based on the posterior distribution:\n\npostpred = predictive(100, posterior)\nhist(postpred; color=:grey80, strokewidth=1)\nxlims!(0, 100); current_figure()\n\n\n\n\nConsistent with the posterior distribution centered at 0.7, we can see that the model now expects around 70 out of 100 throws to result in ‘water’ and both values lower than 50 or close to 100 are deemed very unlikely."
  }
]